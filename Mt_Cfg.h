#if !defined(_MT_CFG_H_)
#define _MT_CFG_H_

//////////////////////////////////////////////////////////////////////////
// В Config.h находится объявление константы F_CPU.
// Если используется макрос MT_SYSTIMER_CALLBACK(), то в файле Config.h
// должны находиться объявления всего того, что используется в теле этого
// макроса (функции, переменные, константы и др.)
//////////////////////////////////////////////////////////////////////////
#include "Config.h"




//////////////////////////////////////////////////////////////////////////
// Директивы и константы библиотеки MT, которые должны определяться
// индивидуально для каждого конкретного проекта
//////////////////////////////////////////////////////////////////////////




#define MT_ATMEL_STUDIO_AVR	// Определяется для использования библиотеки
							// в AVR Studio либо Atmel Studio

//#define MT_KEIL_MDK_CORTEX // Определяется для использования библиотеки
							// в Keil MDK

//#define MT_SIMPLE		// Упрощенный вариант (без оптимизаций)




//////////////////////////////////////////////////////////////////////////
// Количество задач/таймаутов/мьютексов/драйверов
//////////////////////////////////////////////////////////////////////////
#define MT_TASK_COUNT		3	// Количество задач (1...32)
#define MT_TIMEOUT_COUNT	2	// Количество таймаутов (0...255)
#define MT_MUTEX_COUNT		1	// Количество мьютексов (0...255)
#define MT_DRV_COUNT		1	// Количество драйверов (0...255)
//////////////////////////////////////////////////////////////////////////




#if defined(MT_ATMEL_STUDIO_AVR)
//////////////////////////////////////////////////////////////////////////
// Номер таймера, который будет использован в качестве системного (0...5).
// ПРИМЕЧАНИЕ: Таймер с таким номером должен быть реализован в
// используемом микроконтроллере.
//////////////////////////////////////////////////////////////////////////
#define MT_SYSTIMER	0		// Таймер 0
//#define MT_SYSTIMER	1		// Таймер 1
//#define MT_SYSTIMER	2		// Таймер 2
//#define MT_SYSTIMER	3		// Таймер 3
//#define MT_SYSTIMER	4		// Таймер 4
//#define MT_SYSTIMER	5		// Таймер 5
//////////////////////////////////////////////////////////////////////////
#endif




//////////////////////////////////////////////////////////////////////////
// Период срабатывания системного таймера в миллисекундах
//////////////////////////////////////////////////////////////////////////
//#define	MT_SYSTIMER_PERIOD_MS	1	// 1мс / 1000Гц
//#define	MT_SYSTIMER_PERIOD_MS	2	// 2мс / 500Гц
//#define	MT_SYSTIMER_PERIOD_MS	4	// 4мс / 250Гц
//#define	MT_SYSTIMER_PERIOD_MS	5	// 5мс / 200Гц
//#define	MT_SYSTIMER_PERIOD_MS	8	// 8мс / 125Гц
#define	MT_SYSTIMER_PERIOD_MS	10	// 10мс / 100Гц
//#define	MT_SYSTIMER_PERIOD_MS	16	// 16мс / 62.5Гц
//#define	MT_SYSTIMER_PERIOD_MS	20	// 20мс / 50Гц
//////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////
// MT_USE_TASK_SLEEP определяется для использования функций
// MT_SleepMs, MT_TaskSetSleep, MT_SetSleep.
// Если же данные функции не используются, то для сокращения размера
// прошивки эту директиву следует закомментировать.
//////////////////////////////////////////////////////////////////////////
#define MT_USE_TASK_SLEEP
//////////////////////////////////////////////////////////////////////////
							



//////////////////////////////////////////////////////////////////////////
// MT_USE_LONG_TIMEOUT определяется для использования таймаутов
// размерностью 32 разряда вместо 16 в случае, если требуются таймауты
// длительностью более
// 65535 мс при периоде системного таймера 1 мс,
// 131070 мс при периоде системного таймера 2 мс,
// 262140 мс при периоде системного таймера 4 мс,
// 327675 мс при периоде системного таймера 5 мс,
// 524280 мс при периоде системного таймера 8 мс,
// 655350 мс при периоде системного таймера 10 мс,
// 1048560 мс при периоде системного таймера 16 мс.
// 1310700 мс при периоде системного таймера 20 мс.
// ПРИМЕЧАНИЕ: Если не требуются большие таймауты, то для сокращения
// размера прошивки и увеличения производительности следует
// закомментировать эту директиву.
//////////////////////////////////////////////////////////////////////////
#define MT_USE_LONG_TIMEOUT
//////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////
// MT_USE_GETSYSTIMER определяется для использования функции
// MT_GetSysTimer. 
// ПРИМЕЧАНИЕ: Если константа MT_TIMEOUT_COUNT больше 0, то определение
// символа MT_USE_GETSYSTIMER не оказывает влияния на размер прошивки,
// поскольку функция MT_GetSysTimer используется при работе с таймаутами.
//////////////////////////////////////////////////////////////////////////
#define MT_USE_GETSYSTIMER
//////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////
// В макросе MT_SYSTIMER_CALLBACK можно разместить код, который будет
// выполняться по каждому прерыванию системного таймера.
// Функции, переменные и константы, используемые в теле данного макроса
// должны быть видимы в файле Mt_Cfg.h (например, с помощью включаемого
// файла Config.h)
// ПРИМЕЧАНИЕ: Размером этого кода злоупотреблять не следует.
//////////////////////////////////////////////////////////////////////////
/*
#define MT_SYSTIMER_CALLBACK()\
do {\
	CalcSec();\
} while(0)
*/
//////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////
// MT_USE_TASK_RUN_STOP определяется для использования функций
// MT_TaskSetActive, MT_TaskSetActiveIrq, MT_TaskSetPassive
// Если же данные функции не используются, то для сокращения размера
// прошивки данную директиву следует закомментировать.
//////////////////////////////////////////////////////////////////////////
//#define MT_USE_TASK_RUN_STOP
//////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////
// MT_USE_HIGH_PRIORITY_TASK определяется для использования
// приоритетной задачи (функции MT_TaskSetPriority() и
// MT_TaskPriorityClr() )
// Если в программе не используется приоритетная задача, то для сокращения
// размера прошивки данную директиву следует закомментировать.
//////////////////////////////////////////////////////////////////////////
//#define MT_USE_HIGH_PRIORITY_TASK
//////////////////////////////////////////////////////////////////////////




#if defined(MT_ATMEL_STUDIO_AVR)
//////////////////////////////////////////////////////////////////////////
// MT_USE_GPIOR определяется для использования регистров GPIOR0...GPIOR2
// в качестве некоторых, наиболее часто используемых переменных
// библиотеки MT.
// Такое использование регистров GPIOR0...GPIOR2 вместо ОЗУ дает сокращение
// размера прошивки.
// ПРИМЕЧАНИЕ: Регистры GPIOR0...GPIOR2 не будут использоваться, если
// количество задач больше 8, даже если определен MT_USE_GPIOR, поскольку
// разрядности этих регистров хватает для хранения битовых масок не более,
// чем для 8-ми задач.
//////////////////////////////////////////////////////////////////////////
#define MT_USE_GPIOR
//////////////////////////////////////////////////////////////////////////
#endif


#endif
